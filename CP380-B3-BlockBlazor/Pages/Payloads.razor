@page "/payloads"
<!-- TODO: Add using and inject statements -->

@using CP380_B3_BlockBlazor.Data;
@inject PendingTransactionService _service
<h3>Pending Transactions</h3>

@if (payloads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- TODO: Render a table with all of the pending transactions
               This table should include all of the fields for each pending transaction
      -->
    <table>
        <thead>
            <tr>
                <th>User</th>
                <th>Type</th>
                <th>Amount</th>  
                <th>Item</th> 
            </tr>
        </thead>
        <tbody>
              @foreach (var payload in payloads)
                {
            <tr>
                <td>@payload.User</td>
                <td>@payload.Type</td>
                <td>@payload.Amount</td>
                <td>@payload.Item</td>
            </tr>
                }
        </tbody>
    </table>
}

<p></p>

<p>@submitResponse</p>


<!-- TODO: Add EditForm to submit a new transaction to the server -->


@code {
    private IEnumerable<Payload> payloads;
    private Payload Payload = new Payload("", 0, 0, "");
    private string submitResponse = "";

    protected override async Task OnInitializedAsync()
    {
        // TODO: Fetch all the payloads from the service
        payloads = await PendingTransactionService.Getpayloadasync
    }

    private async Task HandleValidSubmit()
    {

        // TODO: submit the new payload to the web API using the PendingTransactionService
        //       - if succcessful, the payloads should be re-loaded
        //       - if there is an error, then the submitResponse variable should be updated with the error
    }
}
